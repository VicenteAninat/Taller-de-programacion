*Separar todo en clases*

El plan:

1) Generalizar para N bidones

2) Implementar una super clase Operation, que con herencias hacer las operaciones en cada caso
for i
    e1 = 0 -> Operation
    if e1...

3) Heurística: Usar "distancia a la salida"
    Reemplazar
        open <- cola de prioridad (heap)
Colocar una prioridad en el Estado/State

4) Optimizar los close -> all (podría ser tablas hash)

El camino más corto
La ubicacion mas cercana me ayuda a encontrar el punto donde puedo llegar a la ubicacion
objetivo de un solo salto más
Mapa de multiples dimensiones
Descartar caminos demasiado alejados

La operacion:
- Hay que crear el arreglo de visitados y el arreglo de todos
- Parto del primer estado y desde ese se empiezan a crear más
- ¿Un arreglo de estados?
- ¿Un ciclo hasta llegar al estado final?
- ¿Un while con verificador booleano?
- ¿Recursividad?
- ¿Arreglo de estados y operarlos con un for?
- ¿El salto de fé?
- Como hago el calculo de la distancia en n dimensiones
    - ¿Distancia euclidiana?
    - ¿Distancia discreta?

- Agregar atributo Cantidad a GrupoBidones
- 

*******************************************************

Preguntas, pueden ser suposiciones en el desarrollo

1) En el archivo de entrada, ¿se tiene que especificar la capacidad objetivo de TODOS los bidones?
R: Si

2) ¿Se puede usar istringstream?
R: Si